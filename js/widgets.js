// Generated by CoffeeScript 1.6.2
(function() {
  var root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.DragHandle = (function() {
    function DragHandle(x, y, width, height, color, options) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      this.color = color;
      this.options = options != null ? options : {};
      this.onMove = null;
    }

    DragHandle.prototype.render = function(ctx, width, height) {
      ctx.save();
      ctx.translate(this.x, this.y);
      ctx.fillStyle = this.color;
      ctx.beginPath();
      ctx.moveTo(0, this.height);
      ctx.lineTo(this.width, this.height);
      ctx.lineTo(this.width / 2, 0);
      ctx.closePath();
      ctx.fill();
      return ctx.restore();
    };

    DragHandle.prototype.grab = function(x, y) {
      if (x > this.x && x < this.x + this.width && y > this.y && y < this.y + this.height) {
        this.dragStartX = x;
        this.startX = this.x;
        return true;
      } else {
        return false;
      }
    };

    DragHandle.prototype.release = function() {};

    DragHandle.prototype.getMarkerX = function() {
      return this.x + this.width / 2;
    };

    DragHandle.prototype.drag = function(x, y) {
      this.x = x - this.dragStartX + this.startX;
      if ((this.options.minX != null) && this.x < this.options.minX) {
        this.x = this.options.minX;
      }
      if ((this.options.maxX != null) && this.x > this.options.maxX) {
        this.x = this.options.maxX;
      }
      if (this.onMove != null) {
        return this.onMove();
      }
    };

    return DragHandle;

  })();

  root.RangeIndicator = (function() {
    function RangeIndicator(y, height, color, drag1, drag2) {
      this.y = y;
      this.height = height;
      this.color = color;
      this.drag1 = drag1;
      this.drag2 = drag2;
    }

    RangeIndicator.prototype.render = function(ctx, width, heigh) {
      var x1, x2, _ref;

      ctx.fillStyle = this.color;
      ctx.globalAlpha = 0.5;
      x1 = this.drag1.getMarkerX();
      x2 = this.drag2.getMarkerX();
      if (x1 > x2) {
        _ref = [x2, x1], x1 = _ref[0], x2 = _ref[1];
      }
      ctx.fillRect(x1, this.y, x2 - x1, this.height);
      return ctx.globalAlpha = 1;
    };

    return RangeIndicator;

  })();

  root.SpectrumDisplay = (function() {
    function SpectrumDisplay(x, y, width, height) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      this.analyser = null;
    }

    SpectrumDisplay.prototype.render = function(ctx, width, height) {
      var freqByteData, i, _i, _ref, _results;

      ctx.strokeStyle = "#444444";
      ctx.lineWidth = 1;
      ctx.strokeRect(this.x, this.y, this.width, this.height);
      if (this.analyser != null) {
        freqByteData = new Uint8Array(this.analyser.frequencyBinCount);
        this.analyser.getByteFrequencyData(freqByteData);
        ctx.fillStyle = "#47ACF5";
        _results = [];
        for (i = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(ctx.fillRect(this.x + i, this.y + this.height, 1, -(freqByteData[i] / 255) * this.height));
        }
        return _results;
      }
    };

    SpectrumDisplay.prototype.convertXtoF = function(x, Fs) {
      if (this.analyser == null) {
        return null;
      }
      return (x - this.x) / this.analyser.frequencyBinCount * Fs / 2;
    };

    return SpectrumDisplay;

  })();

}).call(this);
