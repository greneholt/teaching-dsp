// Generated by CoffeeScript 1.6.2
(function() {
  var MultiNotchFilter, MultiStageFilter, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  MultiStageFilter = (function() {
    function MultiStageFilter(context) {
      this.context = context;
      this.filters = [];
    }

    MultiStageFilter.prototype.set = function(type, order, frequency, Q) {
      var filter, i, last, _i;

      this.disconnect();
      last = null;
      this.filters = [];
      for (i = _i = 1; 1 <= order ? _i <= order : _i >= order; i = 1 <= order ? ++_i : --_i) {
        filter = this.context.createBiquadFilter();
        filter.type = type;
        filter.frequency.value = frequency;
        filter.Q.value = Q;
        if (last != null) {
          last.connect(filter);
        }
        last = filter;
        this.filters.push(filter);
      }
      if (this.from != null) {
        this.connectFrom(this.from);
      }
      if (this.to != null) {
        return this.connectTo(this.to);
      }
    };

    MultiStageFilter.prototype.disconnect = function() {
      if (this.from != null) {
        this.from.disconnect(0);
      }
      if (this.filters.length > 0) {
        return this.filters[this.filters.length - 1].disconnect(0);
      }
    };

    MultiStageFilter.prototype.connectTo = function(to) {
      this.to = to;
      if (this.filters.length > 0) {
        return this.filters[this.filters.length - 1].connect(this.to);
      } else {
        if (this.from != null) {
          return this.from.connect(this.to);
        }
      }
    };

    MultiStageFilter.prototype.connectFrom = function(from) {
      this.from = from;
      if (this.filters.length > 0) {
        return this.from.connect(this.filters[0]);
      } else {
        if (this.to != null) {
          return this.from.connect(this.to);
        }
      }
    };

    MultiStageFilter.prototype.connect = function(from, to) {
      this.from = from;
      this.to = to;
      this.connectTo(this.to);
      return this.connectFrom(this.from);
    };

    MultiStageFilter.prototype.setFrequency = function(frequency) {
      var filter, _i, _len, _ref, _results;

      _ref = this.filters;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        filter = _ref[_i];
        _results.push(filter.frequency.value = frequency);
      }
      return _results;
    };

    MultiStageFilter.prototype.setQ = function(Q) {
      var filter, _i, _len, _ref, _results;

      _ref = this.filters;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        filter = _ref[_i];
        _results.push(filter.Q.value = Q);
      }
      return _results;
    };

    return MultiStageFilter;

  })();

  MultiNotchFilter = (function() {
    function MultiNotchFilter(context) {
      this.context = context;
      this.filters = [];
    }

    MultiNotchFilter.prototype.addFrequency = function(frequency) {
      var filter;

      filter = this.context.createBiquadFilter();
      filter.type = 6;
      filter.frequency.value = frequency;
      filter.Q.value = 500;
      if (this.filters.length > 0) {
        this.filters[this.filters.length - 1].disconnect(0);
        this.filters[this.filters.length - 1].connect(filter);
      } else if (this.from != null) {
        this.from.disconnect(0);
        this.from.connect(filter);
      }
      if (this.to != null) {
        filter.connect(this.to);
      }
      return this.filters.push(filter);
    };

    MultiNotchFilter.prototype.removeFilter = function(i) {
      var filter;

      filter = this.filters[i];
      filter.disconnect(0);
      if (i === 0) {
        if (this.from != null) {
          this.from.disconnect(0);
        }
      } else {
        this.filters[i - 1].disconnect(0);
      }
      if (this.filters.length === 1) {
        if (this.from != null) {
          this.from.connect(this.to);
        }
      } else if (i === 0) {
        if (this.from != null) {
          this.from.connect(this.filters[i + 1]);
        }
      } else if (i === this.filters.length - 1) {
        if (this.to != null) {
          this.filters[i - 1].connect(this.to);
        }
      } else {
        this.filters[i - 1].connect(this.filters[i + 1]);
      }
      return this.filters.splice(i, 1);
    };

    MultiNotchFilter.prototype.removeFrequency = function(frequency) {
      var filter, i, _i, _len, _ref;

      _ref = this.filters;
      for (filter = _i = 0, _len = _ref.length; _i < _len; filter = ++_i) {
        i = _ref[filter];
        if (filter.frequency.value === frequency) {
          this.removeFilter(i);
          return true;
        }
      }
      return false;
    };

    MultiNotchFilter.prototype.disconnect = function() {
      if (this.from != null) {
        this.from.disconnect(0);
      }
      if (this.filters.length > 0) {
        return this.filters[this.filters.length - 1].disconnect(0);
      }
    };

    MultiNotchFilter.prototype.connectTo = function(to) {
      this.to = to;
      if (this.filters.length > 0) {
        return this.filters[this.filters.length - 1].connect(this.to);
      } else {
        if (this.from != null) {
          return this.from.connect(this.to);
        }
      }
    };

    MultiNotchFilter.prototype.connectFrom = function(from) {
      this.from = from;
      if (this.filters.length > 0) {
        return this.from.connect(this.filters[0]);
      } else {
        if (this.to != null) {
          return this.from.connect(this.to);
        }
      }
    };

    MultiNotchFilter.prototype.connect = function(from, to) {
      this.from = from;
      this.to = to;
      this.connectTo(this.to);
      return this.connectFrom(this.from);
    };

    MultiNotchFilter.prototype.setFrequency = function(i, frequency) {
      return this.filters[i].frequency.value = frequency;
    };

    return MultiNotchFilter;

  })();

  root.AudioPipeline = (function() {
    function AudioPipeline(context, noiseBuffer) {
      this.context = context;
      this.noiseBuffer = noiseBuffer;
      this.playing = false;
      this.voiceVolume = this.context.createGainNode();
      this.voiceVolume.gain.value = 2;
      this.voiceFilter = new MultiStageFilter(this.context);
      this.voiceFilter.connectFrom(this.voiceVolume);
      this.noiseFilter = new MultiStageFilter(this.context);
      this.preAnalyser = this.context.createAnalyser();
      this.preAnalyser.smoothingTimeConstant.value = 100;
      this.voiceFilter.connectTo(this.preAnalyser);
      this.noiseFilter.connectTo(this.preAnalyser);
      this.tones = [];
      this.oscillators = [];
      this.bandPass = new MultiStageFilter(this.context);
      this.bandPass.connectFrom(this.preAnalyser);
      this.volume = this.context.createGainNode();
      this.bandPass.connectTo(this.volume);
      this.toneFilter = new MultiNotchFilter(this.context);
      this.toneFilter.connectFrom(this.volume);
      this.postAnalyser = this.context.createAnalyser();
      this.postAnalyser.smoothingTimeConstant.value = 100;
      this.toneFilter.connectTo(this.postAnalyser);
      this.postAnalyser.connect(this.context.destination);
    }

    AudioPipeline.prototype.setInterference = function(voiceF, voiceQ, tones) {
      this.tones = tones;
      this.voiceFilter.set(2, 8, voiceF, voiceQ);
      return this.noiseFilter.set(6, 8, voiceF, voiceQ);
    };

    AudioPipeline.prototype.play = function(voiceBuffer) {
      var freq, now, osc;

      if (this.playing) {
        this.stop();
      }
      this.playing = true;
      console.log('audio pipeline playing');
      this.noiseSource = this.context.createBufferSource();
      this.noiseSource.buffer = this.noiseBuffer;
      this.noiseSource.loop = true;
      this.noiseFilter.connectFrom(this.noiseSource);
      this.voiceSource = this.context.createBufferSource();
      this.voiceSource.buffer = voiceBuffer;
      this.voiceSource.loop = true;
      this.voiceSource.connect(this.voiceVolume);
      now = this.context.currentTime;
      this.noiseSource.noteOn(now);
      this.oscillators = (function() {
        var _i, _len, _ref, _results;

        _ref = this.tones;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          freq = _ref[_i];
          osc = this.context.createOscillator();
          osc.frequency.value = freq;
          osc.connect(this.preAnalyser);
          osc.noteOn(now);
          _results.push(osc);
        }
        return _results;
      }).call(this);
      return this.voiceSource.noteOn(now + 2);
    };

    AudioPipeline.prototype.stop = function() {
      var now, osc, _i, _len, _ref;

      if (!this.playing) {
        return;
      }
      this.playing = false;
      console.log('audio pipeline stopping');
      now = this.context.currentTime;
      if (this.noiseSource != null) {
        this.noiseSource.noteOff(now);
        this.noiseSource.disconnect(0);
        this.noiseSource = null;
      }
      if (this.voiceSource != null) {
        this.voiceSource.noteOff(now);
        this.voiceSource.disconnect(0);
        this.voiceSource = null;
      }
      _ref = this.oscillators;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        osc = _ref[_i];
        osc.noteOff(now);
        osc.disconnect(0);
      }
      return this.oscillators = [];
    };

    return AudioPipeline;

  })();

}).call(this);
