// Generated by CoffeeScript 1.6.3
(function() {
  var CanvasManager, DragHandle, LineIndicator, RangeIndicator, SpectrumDisplay, loadSound, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  CanvasManager = root.CanvasManager;

  DragHandle = root.DragHandle;

  RangeIndicator = root.RangeIndicator;

  LineIndicator = root.LineIndicator;

  SpectrumDisplay = root.SpectrumDisplay;

  loadSound = function(context, url, callback) {
    var request;
    request = new XMLHttpRequest();
    request.open('GET', url, true);
    request.responseType = 'arraybuffer';
    request.onload = function() {
      return context.decodeAudioData(request.response, callback);
    };
    return request.send();
  };

  $(document).ready(function() {
    var NotchFilter, bandPassInd, calculateBandPass, canvas, context, handle1, handle2, mgr, noiseBuffer, onLoaded, setup, specDisplay, toLoad, voiceBuffer;
    window.scrollTo(0, 1);
    context = new webkitAudioContext();
    voiceBuffer = null;
    noiseBuffer = null;
    canvas = $('canvas');
    mgr = new CanvasManager(canvas);
    specDisplay = new SpectrumDisplay(context, 25, 1, 675, 200);
    mgr.add(specDisplay);
    handle1 = new DragHandle(100, 250, 50, 50, "#3EA828", {
      minX: 0,
      maxX: 675
    });
    handle2 = new DragHandle(400, 250, 50, 50, "#3EA828", {
      minX: 0,
      maxX: 675
    });
    bandPassInd = new RangeIndicator(1, 200, "#3EA828", handle1, handle2);
    NotchFilter = (function() {
      function NotchFilter(filter) {
        var _this = this;
        this.filter = filter;
        this.updateFilter = __bind(this.updateFilter, this);
        this.handle = new DragHandle(400, 200, 50, 50, "#EB1A1A", {
          minX: 0,
          maxX: 675
        });
        this.indicator = new LineIndicator(1, 200, "#EB1A1A", this.handle);
        this.updateFilter();
        this.onMove = null;
        this.handle.onMove = function() {
          _this.updateFilter();
          if (_this.onMove != null) {
            return _this.onMove();
          }
        };
      }

      NotchFilter.prototype.addTo = function(canvasManager) {
        canvasManager.add(this.handle, true);
        return canvasManager.add(this.indicator);
      };

      NotchFilter.prototype.removeFrom = function(canvasManager) {
        canvasManager.remove(this.handle);
        return canvasManager.remove(this.indicator);
      };

      NotchFilter.prototype.updateFilter = function() {
        var f;
        f = specDisplay.convertXtoF(this.handle.getMarkerX());
        f = Math.round(f / 100) * 100;
        return this.filter.frequency.value = f;
      };

      return NotchFilter;

    })();
    mgr.render();
    toLoad = 2;
    onLoaded = function() {
      toLoad--;
      if (toLoad === 0) {
        return setup();
      }
    };
    loadSound(context, 'atlys.mp3', function(buffer) {
      voiceBuffer = buffer;
      return onLoaded();
    });
    loadSound(context, 'noise.mp3', function(buffer) {
      noiseBuffer = buffer;
      return onLoaded();
    });
    calculateBandPass = function() {
      var Q, delta, f1, f2, freq, x1, x2, _ref;
      x1 = handle1.getMarkerX();
      x2 = handle2.getMarkerX();
      if (x1 > x2) {
        _ref = [x2, x1], x1 = _ref[0], x2 = _ref[1];
      }
      f1 = specDisplay.convertXtoF(x1);
      f2 = specDisplay.convertXtoF(x2);
      delta = f2 - f1;
      freq = (f1 + f2) / 2;
      Q = freq / delta;
      $('#band-pass-info').text("Band-Pass Filter: " + (Math.round(f1)) + "-" + (Math.round(f2)) + " Hz, Bandwidth: " + (Math.round(f2 - f1)) + " Hz");
      return [freq, Q];
    };
    return setup = function() {
      var intervalId, notchFilters, pipeline, playing, updateNotchFilterInfo, updateVolume, volumeSlider;
      pipeline = new AudioPipeline(context, noiseBuffer);
      specDisplay.analyser = pipeline.preAnalyser;
      pipeline.setInterference(1500, 0.7, [900, 1100, 1300, 1500, 1700, 1900]);
      handle1.onMove = handle2.onMove = function() {
        var Q, freq, _ref;
        _ref = calculateBandPass(), freq = _ref[0], Q = _ref[1];
        pipeline.bandPass.setFrequency(freq);
        return pipeline.bandPass.setQ(Q);
      };
      playing = false;
      intervalId = null;
      $('#play-button').click(function(e) {
        if (playing) {
          playing = false;
          $(e.target).text("Play");
          pipeline.stop();
          return clearInterval(intervalId);
        } else {
          playing = true;
          $(e.target).text("Stop");
          pipeline.play(voiceBuffer);
          return intervalId = setInterval(function() {
            return mgr.render();
          }, 30);
        }
      });
      $('.option').click(function(e) {
        return $(e.target).toggleClass('enabled');
      });
      volumeSlider = $('#volume-slider');
      updateVolume = function() {
        return pipeline.setVolume(Math.pow(10, volumeSlider.val() / 100));
      };
      updateVolume();
      volumeSlider.change(updateVolume);
      $('#show-output-spectrum').click(function(e) {
        if ($(e.target).is('.enabled')) {
          specDisplay.analyser = pipeline.postAnalyser;
        } else {
          specDisplay.analyser = pipeline.preAnalyser;
        }
        return mgr.render();
      });
      $('#enable-band-pass').click(function(e) {
        var Q, freq, _ref;
        if ($(e.target).is('.enabled')) {
          mgr.add(handle1, true);
          mgr.add(handle2, true);
          mgr.add(bandPassInd);
          _ref = calculateBandPass(), freq = _ref[0], Q = _ref[1];
          pipeline.bandPass.set(2, 8, freq, Q);
          return $('#band-pass-info').css('display', 'block');
        } else {
          mgr.remove(handle1);
          mgr.remove(handle2);
          mgr.remove(bandPassInd);
          pipeline.bandPass.clear();
          return $('#band-pass-info').css('display', 'none');
        }
      });
      notchFilters = [];
      updateNotchFilterInfo = function() {
        var frequencies, info, notchFilter;
        info = $('#notch-filter-info');
        frequencies = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = notchFilters.length; _i < _len; _i++) {
            notchFilter = notchFilters[_i];
            _results.push("" + (Math.round(notchFilter.filter.frequency.value)) + " Hz");
          }
          return _results;
        })();
        frequencies = frequencies.join(', ');
        return info.text("Notch Filters: " + frequencies);
      };
      $('#add-notch-filter').click(function() {
        var filter, notchFilter;
        if (notchFilters.length === 0) {
          $('#notch-filter-info').css('display', 'block');
          $('#remove-notch-filter').css('display', 'block');
        }
        filter = pipeline.toneFilter.addFilter();
        notchFilter = new NotchFilter(filter);
        notchFilter.addTo(mgr);
        notchFilter.onMove = updateNotchFilterInfo;
        notchFilters.push(notchFilter);
        return updateNotchFilterInfo();
      });
      return $('#remove-notch-filter').click(function() {
        var notchFilter;
        notchFilter = notchFilters.pop();
        pipeline.toneFilter.removeFilter(notchFilter.filter);
        notchFilter.removeFrom(mgr);
        updateNotchFilterInfo();
        if (notchFilters.length === 0) {
          $('#notch-filter-info').css('display', 'none');
          return $('#remove-notch-filter').css('display', 'none');
        }
      });
    };
  });

}).call(this);
